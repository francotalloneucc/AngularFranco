trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  frontPath: './EmployeeCrudAngular'
  ConnectedServiceName: 'ServiceConnectionARM'
  acrLoginServer: 'ftmingsoft3uccacr.azurecr.io'
  backImageName: 'employee-crud-api'
  frontImageName: 'employee-crud-front'
  ResourceGroupName: 'TPSIngSoft3UCC2024' # Por ejemplo 'TPS_INGSOFT3_UCC'
  backContainerInstanceNameQA: 'ftm-crud-api-qa' # Por ejemplo 'as-crud-api-qa'
  backImageTag: 'latest' 
  container-cpu-api-qa: 1 # CPUs de nuestro container de QA
  container-memory-api-qa: 1.5 # RAM de nuestro container de QA
  acrName: 'ftmingsoft3uccacr' # Nombre de tu ACR sin el sufijo .azurecr.io

stages:
  - stage: BuildAndAnalyze
    displayName: 'Build, Test and Analyze API and Front'
    jobs:
      - job: BuildDotnet
        displayName: 'Build and Test API'
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self
            fetchDepth: 0

          # Preparar SonarCloud
          - task: SonarCloudPrepare@2
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'francotallone'
              scannerMode: 'MSBuild'
              projectKey: 'francotallone_TP7'
              projectName: 'TP7'

          # Instalar .NET 8 SDK
          - task: UseDotNet@2
            displayName: 'Instalar .NET 8.0 SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # Restaurar paquetes NuGet
          - task: DotNetCoreCLI@2
            displayName: 'Restaurar paquetes NuGet'
            inputs:
              command: restore
              projects: '$(solution)'

          # Ejecutar pruebas de la API
          - task: DotNetCoreCLI@2
            displayName: 'Ejecutar pruebas de la API'
            inputs:
              command: 'test'
              projects: '**/*.Tests.csproj'
              arguments: '--collect:"XPlat Code Coverage"'

          # Publicar resultados de code coverage del back-end
          - task: PublishCodeCoverageResults@2
            displayName: 'Publicar resultados de code coverage del back-end'
            inputs:
              summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
              failIfCoverageEmpty: false

          # Compilar la API
          - task: DotNetCoreCLI@2
            displayName: 'Compilar la API'
            inputs:
              command: build
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration)'

          # Publicar aplicación .NET
          - task: DotNetCoreCLI@2
            displayName: 'Publicar aplicación'
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          # Publicar artefactos de compilación
          - task: PublishBuildArtifacts@1
            displayName: 'Publicar artefactos de compilación'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'api-drop'
              publishLocation: 'Container'

          # Análisis de código con SonarCloud
          - task: SonarCloudAnalyze@2
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          # Publicar resultados de SonarCloud
          - task: SonarCloudPublish@2
            inputs:
              pollingTimeoutSec: '300'

          # Publicar Dockerfile de Back
          - task: PublishPipelineArtifact@1
            displayName: 'Publicar Dockerfile de Back'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/docker/api/Dockerfile'
              artifact: 'dockerfile-back'

      - job: BuildAngular
        displayName: "Build and Test Angular"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 0

          # Instalar Node.js
          - task: NodeTool@0
            displayName: 'Instalar Node.js'
            inputs:
              versionSpec: '22.x'
    
          # Instalar dependencias
          - script: npm install
            displayName: 'Instalar dependencias'
            workingDirectory: $(frontPath)

          # Ejecutar pruebas del front con cobertura
          - script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
            displayName: 'Ejecutar pruebas del front'
            workingDirectory: $(frontPath)
            continueOnError: true

          # Publicar resultados de code coverage del front
          - task: PublishCodeCoverageResults@2
            displayName: 'Publicar resultados de code coverage del front'
            inputs:
              summaryFileLocation: '$(frontPath)/coverage/lcov.info'
              failIfCoverageEmpty: false
            condition: always()

          # Publicar resultados de pruebas unitarias del front
          - task: PublishTestResults@2
            displayName: 'Publicar resultados de pruebas unitarias del front'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(frontPath)/test-results/test-results.xml'
              failTaskOnFailedTests: true
            condition: always()

          # Compilar el proyecto Angular
          - script: npm run build
            displayName: 'Compilar el proyecto Angular'
            workingDirectory: $(frontPath)

          # Publicar artefactos Angular
          - task: PublishBuildArtifacts@1
            displayName: 'Publicar artefactos Angular'
            inputs:
              PathtoPublish: '$(frontPath)/dist'
              ArtifactName: 'front-drop'

          # Publicar Dockerfile de Front
          - task: PublishPipelineArtifact@1
            displayName: 'Publicar Dockerfile de Front'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/docker/front/Dockerfile'
              artifact: 'dockerfile-front'

# ----------------------------------------------------------
# STAGE BUILD DOCKER IMAGES Y PUSH A AZURE CONTAINER REGISTRY
# ----------------------------------------------------------

  - stage: DockerBuildAndPush
    displayName: 'Construir y Subir Imágenes Docker a ACR'
    dependsOn: BuildAndAnalyze
    jobs:
      - job: docker_build_and_push
        displayName: 'Construir y Subir Imágenes Docker a ACR'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self

          # Descargar los artefactos de la API generados en la etapa anterior
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Artefactos de Back'
            inputs:
              buildType: 'current'
              artifactName: 'api-drop'
              targetPath: '$(Pipeline.Workspace)/api-drop'

          # Descargar Dockerfile de Back
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Dockerfile de Back'
            inputs:
              buildType: 'current'
              artifactName: 'dockerfile-back'
              targetPath: '$(Pipeline.Workspace)/dockerfile-back'

          # Copiar el contenido de api-drop (archivos de la API) a la carpeta docker/api
          - script: |
              mkdir -p $(Pipeline.Workspace)/dockerfile-back/api
              cp -r $(Pipeline.Workspace)/api-drop/* $(Pipeline.Workspace)/dockerfile-back/api/
            displayName: 'Copiar archivos de API a la carpeta docker/api'

          # Iniciar sesión en Azure Container Registry (ACR)
          - task: AzureCLI@2
            displayName: 'Iniciar Sesión en Azure Container Registry (ACR)'
            inputs:
              azureSubscription: '$(ConnectedServiceName)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(acrLoginServer)

          # Construir la imagen Docker del back
          - task: Docker@2
            displayName: 'Construir Imagen Docker para Back'
            inputs:
              command: build
              repository: $(acrLoginServer)/$(backImageName)
              dockerfile: $(Pipeline.Workspace)/dockerfile-back/Dockerfile
              buildContext: $(Pipeline.Workspace)/dockerfile-back/api
              tags: 'latest'

          # Subir la imagen Docker del back a ACR
          - task: Docker@2
            displayName: 'Subir Imagen Docker de Back a ACR'
            inputs:
              command: push
              repository: $(acrLoginServer)/$(backImageName)
              tags: 'latest'

          # Descargar los artefactos de front generados en la etapa anterior
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Artefactos de Front'
            inputs:
              buildType: 'current'
              artifactName: 'front-drop'
              targetPath: '$(Pipeline.Workspace)/front-drop'

          # Descargar Dockerfile de Front
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Dockerfile de Front'
            inputs:
              buildType: 'current'
              artifactName: 'dockerfile-front'
              targetPath: '$(Pipeline.Workspace)/dockerfile-front'

          # Copiar el contenido de front-drop a la carpeta docker/front
          - script: |
              mkdir -p $(Pipeline.Workspace)/dockerfile-front/front
              cp -r $(Pipeline.Workspace)/front-drop/* $(Pipeline.Workspace)/dockerfile-front/front/
            displayName: 'Copiar archivos de Front a la carpeta docker/front'

          # Construir la imagen Docker del front
          - task: Docker@2
            displayName: 'Construir Imagen Docker para Front'
            inputs:
              command: build
              repository: $(acrLoginServer)/$(frontImageName)
              dockerfile: $(Pipeline.Workspace)/dockerfile-front/Dockerfile
              buildContext: $(Pipeline.Workspace)/dockerfile-front/front
              tags: 'latest'

          # Subir la imagen Docker del front a ACR
          - task: Docker@2
            displayName: 'Subir Imagen Docker de Front a ACR'
            inputs:
              command: push
              repository: $(acrLoginServer)/$(frontImageName)
              tags: 'latest'

# ----------------------------------------------------------
# STAGE DEPLOY QA
# ----------------------------------------------------------

  - stage: DeployQA
    displayName: 'Desplegar API en QA'
    dependsOn: DockerBuildAndPush
    jobs:
      - deployment: DeployToQA
        displayName: 'Desplegar en QA'
        environment: 'qa'
        strategy:
          runOnce:
            deploy:
              steps:
                # Iniciar sesión en Azure
                - task: AzureCLI@2
                  displayName: 'Iniciar Sesión en Azure'
                  inputs:
                    azureSubscription: '$(ConnectedServiceName)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)

                # Crear instancia de contenedor en QA
                - task: AzureCLI@2
                  displayName: 'Crear Contenedor de API en QA'
                  inputs:
                    azureSubscription: '$(ConnectedServiceName)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az container create \
                        --resource-group $(ResourceGroupName) \
                        --name $(backContainerInstanceNameQA) \
                        --image $(acrLoginServer)/$(backImageName):$(backImageTag) \
                        --cpu $(container-cpu-api-qa) \
                        --memory $(container-memory-api-qa) \
                        --registry-login-server $(acrLoginServer) \
                        --registry-username $(servicePrincipalId) \
                        --registry-password $(servicePrincipalKey) \
                        --dns-name-label $(backContainerInstanceNameQA) \
                        --ports 80

                # Verificar estado del contenedor
                - task: AzureCLI@2
                  displayName: 'Verificar Estado del Contenedor'
                  inputs:
                    azureSubscription: '$(ConnectedServiceName)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az container show \
                        --resource-group $(ResourceGroupName) \
                        --name $(backContainerInstanceNameQA) \
                        --query "instanceView.state"
